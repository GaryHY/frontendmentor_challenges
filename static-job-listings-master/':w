// data :

let data = [
    {
        "id": 1,
        "company": "Photosnap",
        "logo": "./images/photosnap.svg",
        "new": true,
        "featured": true,
        "position": "Senior Frontend Developer",
        "role": "Frontend",
        "level": "Senior",
        "postedAt": "1d ago",
        "contract": "Full Time",
        "location": "USA Only",
        "languages": [
            "HTML",
            "CSS",
            "JavaScript"
        ],
        "tools": []
    },
    {
        "id": 2,
        "company": "Manage",
        "logo": "./images/manage.svg",
        "new": true,
        "featured": true,
        "position": "Fullstack Developer",
        "role": "Fullstack",
        "level": "Midweight",
        "postedAt": "1d ago",
        "contract": "Part Time",
        "location": "Remote",
        "languages": [
            "Python"
        ],
        "tools": [
            "React"
        ]
    },
    {
        "id": 3,
        "company": "Account",
        "logo": "./images/account.svg",
        "new": true,
        "featured": false,
        "position": "Junior Frontend Developer",
        "role": "Frontend",
        "level": "Junior",
        "postedAt": "2d ago",
        "contract": "Part Time",
        "location": "USA Only",
        "languages": [
            "JavaScript"
        ],
        "tools": [
            "React",
            "Sass"
        ]
    },
    {
        "id": 4,
        "company": "MyHome",
        "logo": "./images/myhome.svg",
        "new": false,
        "featured": false,
        "position": "Junior Frontend Developer",
        "role": "Frontend",
        "level": "Junior",
        "postedAt": "5d ago",
        "contract": "Contract",
        "location": "USA Only",
        "languages": [
            "CSS",
            "JavaScript"
        ],
        "tools": []
    },
    {
        "id": 5,
        "company": "Loop Studios",
        "logo": "./images/loop-studios.svg",
        "new": false,
        "featured": false,
        "position": "Software Engineer",
        "role": "Fullstack",
        "level": "Midweight",
        "postedAt": "1w ago",
        "contract": "Full Time",
        "location": "Worldwide",
        "languages": [
            "JavaScript"
        ],
        "tools": [
            "Ruby",
            "Sass"
        ]
    },
    {
        "id": 6,
        "company": "FaceIt",
        "logo": "./images/faceit.svg",
        "new": false,
        "featured": false,
        "position": "Junior Backend Developer",
        "role": "Backend",
        "level": "Junior",
        "postedAt": "2w ago",
        "contract": "Full Time",
        "location": "UK Only",
        "languages": [
            "Ruby"
        ],
        "tools": [
            "RoR"
        ]
    },
    {
        "id": 7,
        "company": "Shortly",
        "logo": "./images/shortly.svg",
        "new": false,
        "featured": false,
        "position": "Junior Developer",
        "role": "Frontend",
        "level": "Junior",
        "postedAt": "2w ago",
        "contract": "Full Time",
        "location": "Worldwide",
        "languages": [
            "HTML",
            "JavaScript"
        ],
        "tools": [
            "Sass"
        ]
    },
    {
        "id": 8,
        "company": "Insure",
        "logo": "./images/insure.svg",
        "new": false,
        "featured": false,
        "position": "Junior Frontend Developer",
        "role": "Frontend",
        "level": "Junior",
        "postedAt": "2w ago",
        "contract": "Full Time",
        "location": "USA Only",
        "languages": [
            "JavaScript"
        ],
        "tools": [
            "Vue",
            "Sass"
        ]
    },
    {
        "id": 9,
        "company": "Eyecam Co.",
        "logo": "./images/eyecam-co.svg",
        "new": false,
        "featured": false,
        "position": "Full Stack Engineer",
        "role": "Fullstack",
        "level": "Midweight",
        "postedAt": "3w ago",
        "contract": "Full Time",
        "location": "Worldwide",
        "languages": [
            "JavaScript",
            "Python"
        ],
        "tools": [
            "Django"
        ]
    },
    {
        "id": 10,
        "company": "The Air Filter Company",
        "logo": "./images/the-air-filter-company.svg",
        "new": false,
        "featured": false,
        "position": "Front-end Dev",
        "role": "Frontend",
        "level": "Junior",
        "postedAt": "1mo ago",
        "contract": "Part Time",
        "location": "Worldwide",
        "languages": [
            "JavaScript"
        ],
        "tools": [
            "React",
            "Sass"
        ]
    }
]

const language_filter = new Set();
const tool_filter = new Set();
const role_filter = new Set();
const level_filter = new Set();

for (let job of data) {
    job.languages.map(language => language_filter.add(language))
    job.tools.map(tool => tool_filter.add(tool))
    level_filter.add(job.level);
    role_filter.add(job.role);
}

// console.log(language_filter);
// console.log(tool_filter);
// console.log(role_filter);
// console.log(level_filter);

// Variables
let filterTags = [];

const buildCard = (card_data) => {
    return `
        <div class="card flex-group">
            <div class="flex-group">
                <img src=${card_data.logo} alt="">
                <div class="flex-group job-content" data-direction="column">
                    <div class="flex-group">
                        <p class="company">${card_data.company}</p>
                        ${card_data.new ? `<p class="new">New!</p>` : `<p></p>`}
                        ${card_data.featured ? `<p class="featured">Featured</p>` : `<p></p>`}
                    </div>
                    <p class="job-title">${card_data.position}</p>
                    <div class="job-info flex-group"> <p class="job-details-item">${card_data.postedAt}</p>
                        <p class="job-details-item">${card_data.contract}</p>
                        <p class="job-details-item">${card_data.location}</p>
                    </div>
                </div>
            </div>
            <ul role="list" class="tags flex-group">
                <li class="tag">${card_data.role}</li>
                <li class="tag">${card_data.level}</li>
                ${card_data.languages.map(language => {
                   return `<li class="tag">${language}</li>`
                }).join('')}
                ${card_data.tools.map(tool => {
                    return `<li class="tag">${tool}</li>`
                }).join('')}
            </ul>
        </div>
`
}

// let card = buildCard(mock);
// document.querySelector(".lol").innerHTML = card;

// filters ce sont la liste de tous les filters applique
const getListFiltered = (filters) => {
    // Je veux voir si filer est inclus dans le bordel;
    const filter_lang = language_filter.filter(tag => filters.includes(tag)); 
    const filter_tool = tool_filter.filter(tag => filters.includes(tag)); 
    const filter_role = role_filter.filter(tag => filters.includes(tag));
    const filter_level = level_filter.filter(tag => filters.includes(tag)); 

    let jobs = [];

    let job_by_language = data.filter(job => job.languages.includes(filter_lang)); 
    let job_by_tool = data.filter(job => job.tools.includes(filter_tool)); 
    let job_by_role = data.filter(job => job.role.includes(filter_role)); 
    let job_by_level = data.filter(job => job.level.includes(filter_level)); 
    // TODO: Trouver les denominateurs communs a ces deux choses
    let jobs_list = job_by_language.lenght > job_by_tool.lenght ? job_by_language : job_by_tool;

}

const handleClickTag = () => {
    let tags = document.querySelectorAll(".tag");

    tags.forEach(tag => {
        tag.addEventListener("click", () => {
            let filterTagsCopy = Array.from(filterTags);
            filterTagsCopy.push(tag.innerText);
            console.log(`The new filter tag list is : ${filterTagsCopy}`);
            handleChangeFilterTag(filterTagsCopy, "add");
        })
    })
}

/// Une fonction pour gerer lorsque la variable filterTags change
const handleChangeFilterTag = (filterTagsCopy, operation) => {
    if (filterTagsCopy !== filterTags) {
        console.log("Je dois modifier le dom", operation);
    } else {
        console.log("Je ne modifie rien");
    }
}

const clearFilter = () => {
    let filterTagsCopy = Array.from(filterTags);
    document.querySelector(".clear-button").addEventListener("click", () => {
        console.log("Je dois clean le filter tag");
    })
    filterTagsCopy = [];
    handleChangeFilterTag(filterTagsCopy, "clear");
}

const addFilter = (filter) => {
    // Les erreurs sont geres parce que j'ajoute les filters en cliquant 
    filterTags.push(filter);
    document.querySelector(".filter-list").innerHTML += `<li class="filter-tag">${filter}</li>` 
}

const removeFilter = () => {
    console.log("Je vais bouger un filter");
}

const toggleClass = (el, className) => {
    if (el.classList.contains(className)){
        el.classList.remove(className);
        return ;
    }
    el.classList.add(className);
}


// handleClickTag();

